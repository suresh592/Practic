1)Stack using IClonable-
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollectionsInCsharp
{

    namespace ConsoleApp1
    {
        interface Icloneable
        {
            void Push(int data);
            int Pop();
        }
        class UsingInterface_Icloneable
        {

            public static void Main()

            {
                MyStack pp = new MyStack();

                pp.Push(100);
                pp.Push(25);
                pp.Push(30);
                pp.Push(40);
                pp.Push(50);
                //pp.Push(60);
                //pp.Push(70);
                pp.print();
                Console.WriteLine();
                Console.WriteLine("Element removed from stack:" + pp.Pop());
                Console.WriteLine("Element removed from stack:" + pp.Pop());
                Console.WriteLine("Element removed from stack:" + pp.Pop());
                Console.WriteLine("Element removed from stack:" + pp.Pop());
                Console.WriteLine("Element removed from stack:" + pp.Pop());
                Console.WriteLine("Element removed from stack:" + pp.Pop());
                Console.WriteLine("Element removed from stack:" + pp.Pop());



            }
        }

        public class MyStack : Icloneable
        {



            int[] arr = new int[5];

            int top = 0;



            public void Push(int data)

            {

                try
                {
                    if (top == 5)
                    {
                        Console.WriteLine("-----StackOverFlow-------");

                    }


                    else
                    {
                        arr[top] = data;
                        top++;
                    }

                }
                catch (Exception e)
                {

                }
            }

            public void print()
            {

                for (int i = top - 1; i >= 0; i--)
                {
                    Console.WriteLine(arr[i]);
                }
            }
            public int Pop()
            {
                if (top <= 0)
                {
                    Console.WriteLine("-----Stack Under Flow------");
                    return -1;
                }
                else
                {
                    int temp = arr[top - 1];
                    top--;

                    return temp;
                }
            }
        }
    }
}


/*OutPut
50
40
30
25
100

Element removed from stack:50
Element removed from stack:40
Element removed from stack:30
Element removed from stack:25
Element removed from stack:100
-----Stack Under Flow------
Element removed from stack:-1
-----Stack Under Flow------
Element removed from stack:-1
Press any key to continue . . .



/*OutPut
-----StackOverFlow-------
-----StackOverFlow-------
50
40
30
25
100

Element removed from stack:50
Element removed from stack:40
Element removed from stack:30
Element removed from stack:25
Element removed from stack:100
-----Stack Under Flow------
Element removed from stack:-1
-----Stack Under Flow------
Element removed from stack:-1
Press any key to continue . . .


